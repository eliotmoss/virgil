//@execute 0=true; 1=false

// Test a few ADTs

type A {
	case Cons(val: int, next: A) {
		def sum(input: int) -> int { return next.sum(input + val); }
	}
	case Null {
		def sum(input: int) -> int { return input; }
	}
	def sum(input: int) -> int;
}

type B(x: int, y: int);

type C(f: float, d: double) #unboxed;

def main(args: Array<string>) -> int {
	var a: A = A.Null;
	for (i < args.length) {
		a = A.Cons(args[i].length, a);
	}
	var b = B(args[0].length, args[1].length);
	var c = C(float.!(args[0].length) * 2.5f, double.!(args[1].length) * 10d);
	return a.sum(0) + b.x + b.y + int.truncf(c.f) + int.truncd(c.d);
}
