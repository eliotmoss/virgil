//@execute 0=0; 6=6
type V2(v21: int, v22: int, v23: int) #unboxed { }
type V3(v31: int, v32: int, v33: int) #unboxed { }

var v2 = V2(200, 201, 202);
var v3 = V3(300, 301, 302);

def main(arg: int) -> int {

	// check that field is optimized away:
	// A Pointer.atField is given to v22, but is not used so is elided,
	// then the field can be elided.
	var pv21 = Pointer.atField(v2.v21);
	var pv22 = Pointer.atField(v2.v22);
	var pv23 = Pointer.atField(v2.v23);

	var diff2 = int.view(pv23 - pv21);

	// check that field is *not* optimized away:
	// The Pointer.atField is used by a load and the load result is also used.
	var pv31 = Pointer.atField(v3.v31);
	var pv32 = Pointer.atField(v3.v32);
	var pv33 = Pointer.atField(v3.v33);
	var i32 = pv32.load<int>();

	var diff3 = int.view(pv33 - pv31);

	return arg + (diff2 - 4) + (diff3 - 8) + (i32 - 301);
}
