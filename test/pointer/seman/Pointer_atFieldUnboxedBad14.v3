//@seman=TypeError @ 33:17
// tests possible issues related to unboxed field and parameterized types

type A(i: int, j: int) #unboxed { }
type B(a: A, b: u32) #unboxed { }

class P { }
class Q extends P { }
class R<T> extends Q {
	var x: T;
	var y: int;
	new(x, y) { }
	def getPtrx() -> Pointer {
		// legality depends on what T is
		return Pointer.atField(x);
	}
}
class S extends R<B> {
	def getPtr() -> Pointer {
		return Pointer.atField(x.a.i);
	}
	new(x: B, y: int) super(x, y) { }
}

def main(n: int) -> int {
	var r = R<B>.new(B(A(n, n+1), u32.view(n+2)), n+3);
	// keep all the fields around
	var pi = Pointer.atField(r.x.a.i);
	var pj = Pointer.atField(r.x.a.j);
	var pb = Pointer.atField(r.x.b);
	var py = Pointer.atField(r.y);
	// case actually being tested
	var p = Pointer.atField(r.x.a);
	return p.load<int>() + pi.load<int>() + pj.load<int>() + pb.load<int>() + py.load<int>() - (4 * n + 6);
}
