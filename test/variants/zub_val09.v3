//@execute 0=0; 1=0; 2=2

// WebAssembly program values.
type Value #unboxed {
	case Ref(val: Object);
	case I32(val: u32);
	case I64(val: u64);
}

class Object { }

type StAction {
	case None;
	case Invoke(vals: Array<Value>);
}

def actions = [
	("foo", StAction.None),
	("bar", StAction.Invoke([Value.Ref(Object.new()), Value.I32(33), Value.I32(34)])),
	("baz", StAction.Invoke([Value.Ref(Object.new()), Value.I32(44), Value.I32(45), Value.I32(45)]))
];

def main(a: int) -> int {
	var vals: Range<Value>;
	match (actions[a].1) {
		None => ;
		Invoke(v) => vals = v;
	}
	var sum = 0;
	for (v in vals) if (v == Value.I32(45)) sum++;
	return sum;
}
