//@execute 0=0; 1=0; 2=2

// WebAssembly program values.
type Value(a: u32, b: u32) #unboxed { }

class Object { }

type StAction {
	case None;
	case Invoke(vals: Array<Value>);
}

def actions = [
	("foo", StAction.None),
	("bar", StAction.Invoke([Value(33, 66), Value(34, 67)])),
	("baz", StAction.Invoke([Value(44, 77), Value(45, 78), Value(45, 78)]))
];

def main(a: int) -> int {
	var vals: Range<Value>;
	match (actions[a].1) {
		None => ;
		Invoke(v) => vals = v;
	}
	var sum = 0;
	for (v in vals) if (v == Value(45, 78)) sum++;
	return sum;
}
