//@execute 0=3; 1=3; 2=0; 3=0; 4=0
type Prim64 #unboxed {
	case Bool(x: bool);
	case Double(x: double);
}

def bit_equal(a: Prim64, b: Prim64) -> bool {
	match (a) {
		Bool(x) => match (b) {
			Bool(y) => return x == y;
			Double(y) => return if(x, 1) == long.view(y);
		}
		Double(x) => match(b) {
			Bool(y) => return long.view(x) == if(y, 1);
			Double(y) => return long.view(x) == long.view(y);
		}
	}
}

def inputs = [0L, 1L, -1L, 878623487L, 8888888888888L];

def main(i: int) -> int {
	var a = inputs[i];
	var x = Prim64.Bool(a != 0);
	var z = Prim64.Double(double.view(a));
	var b1 = if(bit_equal(x, z), 0b01);
	var b4 = if(bit_equal(z, x), 0b10);
	return b1 | b4;
}
