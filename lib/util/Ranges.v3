// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for Ranges.
component Ranges {
	// Compute a hash of {r}, given a {hash} function for each element.
	def hash<T>(h0: int, r: Range<T>, hash: T -> int) -> int {
		for (e in r) h0 = h0 * 33 + hash(e);
		return h0;
	}
	// Map {func} over an input {array}, returning a new array of the results.
	def map<A, B>(r: Range<A>, func: A -> B) -> Array<B> {
		var result = Array<B>.new(r.length);
		for (i < r.length) result[i] = func(r[i]);
		return result;
	}
	// Map {func} over an input {src}, storing the results in the {dest}.
	def mapInto<A, B>(src: Range<A>, func: A -> B, dest: Range<B>) {
		for (i < src.length) dest[i] = func(src[i]);
	}
	// Make a copy of a range as an array.
	def dup<T>(r: Range<T>) -> Array<T> {
		var result = Array<T>.new(r.length);
		for (i < r.length) result[i] = r[i];
		return result;
	}
	// Compare elements of {x} and {y} for equality.
	def equal<A>(x: Range<A>, y: Range<A>) -> bool {
		if (x == y) return true;
		if (x.length != y.length) return false;
		for (i < x.length) if (x[i] != y[i]) return false;
		return true;
	}
	// Reverse the elements of the range {r} in place.
	def reverse<T>(r: Range<T>) {
		var limit = r.length >> 1;
		for (i < limit) {
			var tmp = r[i];
			r[i] = r[r.length - i - 1];
			r[r.length - i - 1] = tmp;
		}
	}
	// Grow a {range} if it is smaller than {size}, returning either {range} or a new one.
	def grow<T>(range: Range<T>, size: int) -> Range<T> {
		if (size > range.length) {
			var n = Array<T>.new(size), max = range.length;
			for (i < max) n[i] = range[i];
			return n;
		}
		return range;
	}
	// Sort the range {r} in place using Quicksort using the {cmp} function.
	def quicksort<T>(r: Range<T>, cmp: (T, T) -> bool) {
		if (r.length <= 1) return;
		if (r.length == 2) {
			var a = r[0], b = r[1];
			if (cmp(b, a)) { r[0] = b; r[1] = a; }
			return;
		}
		def pi = partition(r, cmp);
		if (pi > 1) quicksort(r[0 ... pi], cmp);
		if (pi < r.length) quicksort(r[pi ...], cmp);
	}
	private def partition<T>(r: Range<T>, cmp: (T, T) -> bool) -> int {
		var i = 0, j = r.length - 1;
		def pivot = r[j];
		while (i <= j) {
			var a = r[i];
			if (cmp(a, pivot)) {
				i++;
			} else {
				r[i] = r[j];
				r[j] = a;
				j--;
			}
		}
		return i;
	}
	// Performs binary search on the sorted {range}, returning the index of the first element
	// equal to {val} and {-1} otherwise. For example:
	//         e in [ t, u, v, v, v, x, y, z  ]
	//  lt(e, val)    <  <  =  =  =  >  >  >
	//               result ^
	def binarySearchEq<T>(range: Range<T>, val: T, lt: (T, T) -> bool) -> int {
		var l = 0, r = range.length;
		while (l < r) {
			var mid = (l + r) >> 1;
			var mid_val = range[mid];
			if (lt(mid_val, val)) l = mid + 1;
			else r = mid;
		}
		if (l == range.length) return -1;
		var maybe = range[l];
		if (lt(val, maybe)) return -1;
		return l;
	}
	// Performs binary search on the sorted {range}, returning the index of the last element
	// less than or equal to {val}. For example:
	//         e in [ t, u, v, v, v, x, y, z  ]
	//  lt(e, val)    <  <  =  =  =  >  >  >
	//                     result ^
	def binarySearchLtEq<T>(range: Range<T>, val: T, lt: (T, T) -> bool) -> int {
		var l = 0, r = range.length;
		while (l < r) {
			var mid = (l + r) >> 1;
			var mid_val = range[mid];
			if (lt(val, mid_val)) r = mid;
			else l = mid + 1;
		}
		r--;
		if (r < 0) return -1;
		var maybe = range[r];
		if (lt(val, maybe)) return r - 1;
		return r;
	}
	// Performs binary search on the sorted {range}, returning the index of the first element
	// greater than or equal to {val}. For example:
	//         e in [ t, u, v, v, v, x, y, z  ]
	//  lt(e, val)    <  <  =  =  =  >  >  >
	//               result ^
	def binarySearchGtEq<T>(range: Range<T>, val: T, lt: (T, T) -> bool) -> int {
		var l = 0, r = range.length;
		while (l < r) {
			var mid = (l + r) >> 1;
			var mid_val = range[mid];
			if (lt(mid_val, val)) l = mid + 1;
			else r = mid;
		}
		if (l == range.length) return l;
		var maybe = range[l];
		if (lt(maybe, val)) return l + 1;
		return l;
	}
}
