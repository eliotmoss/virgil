// Copyright 2022 Ben L. Titzer and 2024-2025 Eliot Moss. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This file adds functionality needed by the WasmGc back end but not by the
// Wasm back end.

enum WasmDefTypeCode(code: i16, val: i32) {
	Function	(-0x20, -32),
	Struct		(-0x21, -33),
	Array		(-0x22, -34),
	Continuation	(-0x23, -35),
	SUB		(-0x30, -48),
	SUB_FINAL	(-0x31, -49),
	REC		(-0x32, -50),
}

// Edge classes for WasmGcTypeInfo
class InEdge extends Edge<WasmGcTypeInfo> {
	def getListHead(wti: WasmGcTypeInfo) -> InEdge { return wti.predecessors; }
	def setListHead(wti: WasmGcTypeInfo, e: Edge<WasmGcTypeInfo>) { wti.predecessors = InEdge.!(e); }
	new(src: WasmGcTypeInfo, dst: WasmGcTypeInfo) super(src, dst) { }
}
class OutEdge extends Edge<WasmGcTypeInfo> {
	def getListHead(wti: WasmGcTypeInfo) -> OutEdge { return wti.successors; }
	def setListHead(wti: WasmGcTypeInfo, e: Edge<WasmGcTypeInfo>) { wti.successors = OutEdge.!(e); }
	new(src: WasmGcTypeInfo, dst: WasmGcTypeInfo) super(src, dst) { }
}

// Information for graph algorithm that discovers recursion groups, etc.
class WasmGcTypeInfo(wtype: WasmHeapType) {
	private var predecessors: InEdge;
	private var successors: OutEdge;
	var visited: bool;
	def addInEdge(predecessor: WasmGcTypeInfo) { InEdge.new(this, predecessor); }
	def addOutEdge(successor: WasmGcTypeInfo) { OutEdge.new(this, successor); }
}

// Canonicalizes and encodes Virgil types and signatures into WASM GC types and function sigs
class WasmGcTypeTable(wasmType: Type -> WasmValueType) {
	// Signatures are treated differently.  Because they don't arrive as Virgil types,
	// already canonicalized, their Wasm form needs its own canonicalization.  Also,
	// they are not of themselves recursive.

	// Map for canonicalizing and mapping Signatures
	def signatureMap = HashMap<Signature, WasmHeapType>.new(Signature.hash, Signature.equals);

	// Map indicating which Wasm type is used to represent each (canonicalized) Virgil type
	def heapTypeMap = TypeUtil.newTypeMap<WasmHeapType>();

	// Map indicating the Wasm type for each (live) IrClass; we do not assume that all of
	// these appear in heapTypeMap
	def classMap = HashMap<IrClass, WasmHeapType>.new(IrItem.uid, IrClass.==);

	// The (recursion) groups of types for eventual output in the type section of a Wasm module
	def var typeGroups: Vector<Vector<WasmGcTypeInfo>>;

	// Note: since index 0 means "unassigned", the actual Wasm type index
	// for a type is one smaller than the WasmType index field.  Thus
	// maxIndex is also the number of type indices assigned so far.
	def var maxIndex: u32 = 0;

	// Adds a heap Type to heapTypeMap.
	// If wasmType is null, then for ARRAY and FUNCREF/CLOSURE devises a WasmHeapType;
	// for other cases of null wasmType it does nothing.
	def addHeapType(typ: Type, wasmType: WasmHeapType) {
		if (heapTypeMap.has(typ)) return;
		if (wasmType == null) {
			match (typ.typeCon.kind) {
				ARRAY => {
					// we'll come back and fix the element type later
					var wat = WasmArrayType.new((WasmPacking.NONE, WasmValueType.Void));
					heapTypeMap[typ] = wat;
					// add element type (ignored if scalar, etc.)
					addHeapType(typ.nested.head, null);
					return;
				}
				CLASS, VARIANT => return;	// should not happen: need to add via IrClass
				FUNCREF, CLOSURE => {
					if (FuncType.?(typ)) addSignature(FuncType.!(typ).sig());
					return;
				}
				_ => return;	// ignore if not actually a heap type
			}
		}
		heapTypeMap[typ] = wasmType;
	}

	// adds an IrClass to classMap and its class type to heapTypemap
	def addClass(cls: IrClass) {
		// we assume parent is added first
		var parent: WasmHeapType = if(cls.parent == null, null, classMap[cls.parent]);
		var st = WasmStructType.new(WasmStructType.!(parent), null);
		addHeapType(cls.ctype, st);
	}

	// add a Signature to signatureMap and its function type to heapTypeMap
	def addSignature(sig: Signature) -> WasmHeapType {
		var wft = signatureMap[sig];
		if (wft == null) {
			var ft = sig.funcType();
			var entry = heapTypeMap[ft];
			if (entry == null) {
				var params = Array<WasmValueType>.new(sig.paramTypes.length);
				var results = Array<WasmValueType>.new(sig.returnTypes.length);
				wft = WasmFuncType.new(params, results);
				heapTypeMap[ft] = wft;
			} else {
				wft = WasmFuncType.!(heapTypeMap[ft]);
			}
			signatureMap[sig] = wft;
		}
		return wft;
	}

	// Obtain WasmGcTypeInfo, creating a new object if necessary
	private def getTypeInfo(wt: WasmHeapType) -> WasmGcTypeInfo {
		var info = wt.typeInfo;
		if (info == null) wt.typeInfo = info = WasmGcTypeInfo.new(wt);
		return info;
	}

	// Helper for completeTypes; processes (IrClass,WasmHeapType) pairs
	private def completeFromIrClass(cls: IrClass, wt: WasmHeapType) {
		var wst = WasmStructType.!(wt);
		var info = getTypeInfo(wst);
		if (wst.parent != null) {
			var pinfo = getTypeInfo(wst.parent);
			info.addOutEdge(pinfo);
			pinfo.addInEdge(info);
		}
		for (m in cls.methods) {
			var wft = signatureMap[m.sig];
			var finfo = getTypeInfo(wft);
			info.addOutEdge(finfo);
			finfo.addInEdge(info);
		}
		for (i < cls.fields.length) {
			var ftype = cls.fields[i].fieldType;
			var wft = heapTypeMap[ftype];
			if (wft == null) {
				// EBM: check about mutability
				wst.fields[i] = (packingForType(ftype), getValueTypeFor(ftype), true);
			} else {
				var finfo = getTypeInfo(wft);
				info.addOutEdge(finfo);
				finfo.addInEdge(info);
				// EBM: check about mutability
				wst.fields[i] = (WasmPacking.NONE, WasmValueType.RefNull(wft), true);
			}
		}
		wt.complete = true;
	}

	// Helper for completeTypes; processes (Type,WasmHeapType) pairs
	private def completeFromType(t: Type, wt: WasmHeapType) {
		if (wt.complete) return;
		var info = getTypeInfo(wt);
		match (t.typeCon.kind) {
			ARRAY => {
				var wat = WasmArrayType.!(wt);
				var eltype = V3Array.elementType(t);
				var vtype = getValueTypeFor(eltype);
				// EBM: consider packing at some point
				wat.elem = (WasmPacking.NONE, vtype);
				var wet = heapTypeMap[eltype];
				if (wet != null) {
					var einfo = getTypeInfo(wet);
					info.addOutEdge(einfo);
					einfo.addInEdge(info);
				}
			}
			FUNCREF, CLOSURE => {
				var wft = WasmFuncType.!(wt);
				var sig = FuncType.!(t).sig();
				for (i < sig.paramTypes.length) {
					wft.params[i] = getValueTypeFor(sig.paramTypes[i]);
					var wpt = heapTypeMap[sig.paramTypes[i]];
					if (wpt != null) {
						var pinfo = getTypeInfo(wpt);
						info.addOutEdge(pinfo);
						pinfo.addInEdge(info);
					}
				}
				for (i < sig.returnTypes.length) {
					wft.results[i] = getValueTypeFor(sig.returnTypes[i]);
					var wrt = heapTypeMap[sig.returnTypes[i]];
					if (wrt != null) {
						var rinfo = getTypeInfo(wrt);
						info.addOutEdge(rinfo);
						rinfo.addInEdge(info);
					}
				}
			}
			_ => ;	// should not happen
		}
		wt.complete = true;
	}

	// completeTypes fills in the stub WasmType's created by the
	// WasmGcIrTypeVisitor, in preparation for finding recursion groups,
	// etc.  To assist findTypeGroups, completeTypes builds predecessor
	// and successor sets for each WasmHeapType by creating
	// WasmGcTypeInfo information and adding edges to it.
	private def completeTypes() {
		classMap.apply(completeFromIrClass);
		heapTypeMap.apply(completeFromType);
	}

	// Support for dfs0 helper
	private def dfs0_visit(stack: Vector<WasmGcTypeInfo>, node: WasmGcTypeInfo) {
		if (node.visited) return;
		node.visited = true;
		var e = node.successors;
		while (e != null) {
			dfs0_visit(stack, e.dest);
			e = OutEdge.!(e.next);
		}
		stack.put(node);
	}

	// Helper for first depth-first search of the type graph
	private def dfs0(stack: Vector<WasmGcTypeInfo>, t: Type, wt: WasmHeapType) {
		// Note: we don't use getTypeInfo here so that we catch any
		// case where the info is absent
		dfs0_visit(stack, wt.typeInfo);
	}

	// Builds a single stroncgly connected component by doing a DFS from a
	// given node over predecessors (vs successors)
	private def dfs1(comp: Vector<WasmGcTypeInfo>, node: WasmGcTypeInfo) {
		if (node.visited) return;
		node.visited = true;
		comp.put(node);
		var e = node.predecessors;
		while (e != null) {
			dfs1(comp, e.dest);
			e = InEdge.!(e.next);
		}
	}

	// After a pass over the classes (etc.), we should have enough types
	// entered, with their WasmType's, to form recursion groups and assign
	// type indices.  We do this by running a strongly connected
	// components (SCC) algorithm over the graph of types.  Once we have
	// the SCCs, we order them by repeatedly finding SCCs all of whose
	// predecessors have already been found.
	private def findTypeGroups() {
		// This is an implementation of the Kosaraju-Sharir algorithm.

		// Step 1: Do a depth-first search and push nodes on a stack
		// in the order in which we *finish* with them.
		var stack = Vector<WasmGcTypeInfo>.new();
		heapTypeMap.apply(dfs0(stack, _, _));
		// reset visited for second DFS
		for (i < stack.length) stack[i].visited = false;

		// Step 2: Do a depth-first search *over predecessors* to find
		// components.  Importantly, this proceeds in reverse of the
		// order in which Step 1 pushed nodes.
		var components = Vector<Vector<WasmGcTypeInfo>>.new();
		for (i = stack.length; --i >= 0; void) {
			var node = stack[i];
			if (node.visited) continue;
			var comp = Vector<WasmGcTypeInfo>.new();
			dfs1(comp, node);
			components.put(comp);
		}
		// At this point the components vector has the type groups in
		// the necessary order.  This is because, in stack, if there
		// is a forward path from node u to node v, then either they
		// are in the same component (in which case the order of u and
		// v is arbitrary) or u was pushed to the stack *after* v.
		// This means that if u and v lie in different components and
		// there is a path from u to v, u's component will occur
		// earlier in components than v's will.  Each component is a
		// recursion group for Wasm type purposes, though singleton's
		// will not be output as recursion groups.
		typeGroups = components;
	}

	// This fills in fields (etc.) of types entered so far, then finds the
	// recursion groups of types and assign type indices.  Any types
	// encountered later may refer to these types, but may not be recursive.
	// Such types should be added using insureTypeAdded.
	def assignTypeIndices() {
		completeTypes();
		findTypeGroups();
		var idx: i32 = 0;
		for (i < typeGroups.length) {
			var group = typeGroups[i];
			for (j < group.length) {
				group[j].wtype.index = ++maxIndex;
			}
		}
	}

	// This returns Wasm value types, not heap types
	// Non-recursive ("top-level") function
	def addValueType(t: Type) -> WasmValueType {
		match (t) {
			null => return WasmValueType.Void;
			x: IntType => return if(x.width > 32, WasmValueType.I64, WasmValueType.I32);
			x: FloatType => return if(x.is64, WasmValueType.F64, WasmValueType.F32);
			_ => match (t.typeCon.kind) {
				ENUM => return wasmType(V3.getVariantTagType(t));
				ENUM_SET => return wasmType(V3.getEnumSetType(t));
				ARRAY, CLASS, VARIANT, FUNCREF, POINTER =>
			 	      return addWasmRefType(t); // TODO
				_ => return WasmValueType.Void;
			}
		}
	}

	// Wraps a heap type with a layer of Wasm ref
	// Non-recursive ("top-level") function
	private def addWasmRefType(t: Type) -> WasmValueType {
		addHeapType(t, null);
		return WasmValueType.RefNull(heapTypeMap[t]);
	}

	// This returns Wasm value types, not heap types
	// Non-recursive ("top-level") function
	def getValueTypeFor(t: Type) -> WasmValueType {
		match (t) {
			null => return WasmValueType.Void;
			x: IntType => return if(x.width > 32, WasmValueType.I64, WasmValueType.I32);
			x: FloatType => return if(x.is64, WasmValueType.F64, WasmValueType.F32);
			_ => match (t.typeCon.kind) {
				ENUM => return wasmType(V3.getVariantTagType(t));
				ENUM_SET => return wasmType(V3.getEnumSetType(t));
				ARRAY, CLASS, VARIANT, FUNCREF, POINTER =>
			 	      return WasmValueType.RefNull(heapTypeMap[t]);
				_ => return WasmValueType.Void;
			}
		}
	}

	def packingForType(t: Type) -> WasmPacking {
		match (t) {
			x: IntType => {
				if (x.width <= 8) {
					return if(x.signed, WasmPacking.PACKED_8S, WasmPacking.PACKED_8U);
				} else if (x.width <= 16) {
					return if(x.signed, WasmPacking.PACKED_16S, WasmPacking.PACKED_16U);
				}
				return WasmPacking.NONE;
			}
			_ => return WasmPacking.NONE;
		}
	}

	// This is used after the initial building of the types table from
	// IrModule information, to insure that types encountered in code
	// (etc.?) are added to the type table.  They should form (at most) an
	// acyclic graph of new nodes untilmately referring only to scalar
	// type or types previously entered.
	def insureTypeAdded(typ: Type) {
		var ht = heapTypeMap[typ];
		if (ht != null) {
			// if (!ht.complete) error;
			return;
		}
		match (typ.typeCon.kind) {
			ARRAY => {
				// insert stub
				var wat = WasmArrayType.new((WasmPacking.NONE, WasmValueType.Void));
				heapTypeMap[typ] = wat;
				var info = getTypeInfo(wat);	// should always return a new WasmGcTypeInfo
				// add element type (ignored if scalar, etc.)
				insureTypeAdded(typ.nested.head);
				wat.complete = true;
				typeGroups.put(Vectors.of1<WasmGcTypeInfo>(info));
				return;
			}
			CLASS, VARIANT => return;	// should not happen
			FUNCREF, CLOSURE => {
				if (FuncType.?(typ)) {
					var sig = FuncType.!(typ).sig();
					// check if already canonicalized
					if (signatureMap.has(sig)) return;
					addSignature(sig);
					var wft = signatureMap[sig];
					var info = getTypeInfo(wft);	// should always return a new WasmGcTypeInfo
					completeFromType(typ, wft);
					for (t in sig.paramTypes) insureTypeAdded(t);
					for (t in sig.returnTypes) insureTypeAdded(t);
					wft.complete = true;
					typeGroups.put(Vectors.of1<WasmGcTypeInfo>(info));
				}
				return;
			}
			_ => return;	// ignore if not actually a heap type
		}
	}

	def emit(out: DataWriter) {
		// out.putr(buf.alias());
	}
}
